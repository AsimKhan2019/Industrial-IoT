{
    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "clusterName": {
            "type": "string",
            "defaultValue": "[concat('aks-', take(uniqueString(subscription().subscriptionId, resourceGroup().id), 6))]",
            "metadata": {
                "description": "The name of the Managed Cluster resource."
            }
        },
        "aadPrincipalId": {
            "type": "string",
            "metadata": {
                "description": "The managed resource identity id or the name of the service principal that should register the AAD applications."
            }
        },
        "aadPrincipalPassword": {
            "type": "securestring",
            "defaultValue": "",
            "metadata": {
                "description": "If the aadPrincipalId parameter refers to a service principal name then specify the service principal password to use."
            }
        },
        "aksDnsPrefix": {
            "type": "string",
            "defaultValue": "[concat(parameters('clusterName'), '-dns')]",
            "metadata": {
                "description": "Optional DNS prefix to use with hosted Kubernetes API server FQDN."
            }
        },
        "aksAgentOsDiskSizeGB": {
            "type": "int",
            "defaultValue": 0,
            "metadata": {
                "description": "Disk size (in GiB) to provision for each of the agent pool nodes. This value ranges from 0 to 1023. Specifying 0 will apply the default disk size for that agentVMSize."
            },
            "minValue": 0,
            "maxValue": 1023
        },
        "aksAgentCount": {
            "type": "int",
            "defaultValue": 3,
            "metadata": {
                "description": "The number of nodes for the cluster. 1 Node is enough for Dev/Test and minimum 3 nodes, is recommended for Production"
            },
            "minValue": 1,
            "maxValue": 100
        },
        "aksAgentVMSize": {
            "type": "string",
            "defaultValue": "Standard_DS2_v2",
            "allowedValues": [
                "Standard_B2s",
                "Standard_B2ms",
                "Standard_A2",
                "Standard_A3",
                "Standard_A4",
                "Standard_A5",
                "Standard_A6",
                "Standard_A7",
                "Standard_A8",
                "Standard_A9",
                "Standard_A10",
                "Standard_A11",
                "Standard_A2_v2",
                "Standard_A4_v2",
                "Standard_A8_v2",
                "Standard_A2m_v2",
                "Standard_A4m_v2",
                "Standard_A8m_v2",
                "Standard_D2",
                "Standard_D3",
                "Standard_D4",
                "Standard_D11",
                "Standard_D12",
                "Standard_D13",
                "Standard_D14",
                "Standard_D2_v2",
                "Standard_D3_v2",
                "Standard_D4_v2",
                "Standard_D5_v2",
                "Standard_D11_v2",
                "Standard_D12_v2",
                "Standard_D13_v2",
                "Standard_D14_v2",
                "Standard_D15_v2",
                "Standard_DS2_v2",
                "Standard_G1",
                "Standard_G2",
                "Standard_G3",
                "Standard_G4",
                "Standard_G5",
                "Standard_F2",
                "Standard_F4",
                "Standard_F8",
                "Standard_F16"
            ],
            "metadata": {
                "description": "The size of the Virtual Machine."
            }
        },
        "aksServiceCidr": {
            "type": "string",
            "defaultValue": "10.0.0.0/16",
            "metadata": {
                "description": "A CIDR notation IP range from which to assign service cluster IPs."
            }
        },
        "aksDnsServiceIP": {
            "type": "string",
            "defaultValue": "10.0.0.10",
            "metadata": {
                "description": "Containers DNS server IP address."
            }
        },
        "aksClusterIdentityName": {
            "type": "string",
            "defaultValue": "[concat(parameters('clusterName'), '-msi')]",
            "metadata": {
                "description": "Name of the Managed identity resource of the cluster."
            }
        },
        "aksAdminManagedIdentityName": {
            "type": "string",
            "defaultValue": "[concat(parameters('clusterName'), '-admin-msi')]",
            "metadata": {
                "description": "Name of the Managed identity resource of the cluster admin."
            }
        },
        "deployScriptIdentityName": {
            "type": "string",
            "defaultValue": "[concat('deploy-msi-', take(uniqueString(subscription().subscriptionId, resourceGroup().id), 5))]",
            "metadata": {
                "description": "Name of the Managed identity resource to run scripts"
            }
        },
        "aksDockerBridgeCidr": {
            "type": "string",
            "defaultValue": "172.17.0.1/16",
            "metadata": {
                "description": "A CIDR notation IP for Docker bridge."
            }
        },
        "nsgName": {
            "type": "string",
            "defaultValue": "[concat(parameters('clusterName'), '-nsg')]",
            "metadata": {
                "description": "Name of network security groups."
            }
        },
        "vnetName": {
            "type": "string",
            "defaultValue": "[concat(parameters('clusterName'), '-vnet')]",
            "metadata": {
                "description": "Name of virtual networks."
            }
        },
        "logAnalyticsWorkspaceName": {
            "type": "string",
            "defaultValue": "[concat(parameters('clusterName'), '-logs-', take(uniqueString(parameters('clusterName'), subscription().subscriptionId, resourceGroup().id), 6))]",
            "metadata": {
                "description": "Specifies the name of the Azure Log Analytics workspace created as part of this deployment."
            }
        },
        "logAnalyticsWorkspaceSku": {
            "type": "string",
            "allowedValues": [
                "Standalone",
                "PerNode",
                "PerGB2018"
            ],
            "defaultValue": "PerGB2018",
            "metadata": {
                "description": "Specifies the service tier of the Azure Log Analytics workspace."
            }
        },
        "templateUrl": {
            "type": "string",
            "defaultValue": "[if(contains(deployment().properties, 'templateLink'), deployment().properties.templateLink.uri, 'https://raw.githubusercontent.com/Azure/Industrial-IoT/master/deploy/templates/')]",
            "metadata": {
                "description": "The artifacts url from which to pull all linked templates. Default is official repository."
            }
        },
        "tags": {
            "type": "object",
            "defaultValue": {},
            "metadata": {
                "description": "Tags for Azure resources."
            }
        }
    },
    "variables": {
        "kubernetesSubnetName": "kubesubnet",
        "kubernetesSubnetId": "[concat(variables('clusterVnetResourceId'), '/subnets/', variables('kubernetesSubnetName'))]",
        "nsgId": "[resourceId(resourceGroup().name, 'Microsoft.Network/networkSecurityGroups', parameters('nsgName'))]",
        "clusterVnetResourceId": "[resourceId(resourceGroup().name,'Microsoft.Network/virtualNetworks', parameters('vnetName'))]",
        "aksResourceId": "[resourceId('Microsoft.ContainerService/managedClusters', parameters('clusterName'))]",
        "aksClusterIdentityResourceId": "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('aksClusterIdentityName'))]",
        "aksClusterIdentityRoleAssignmentsName": "[concat('rbac.aks.', take(uniqueString(subscription().subscriptionId, resourceGroup().id), 5))]",
        "aksClusterIdentityRoleAssignmentsId": "[resourceId('Microsoft.Resources/deployments', variables('aksClusterIdentityRoleAssignmentsName'))]",
        "aksAdminManagedIdentityResourceId": "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('aksAdminManagedIdentityName'))]",
        "aksAdminManagedIdentityRoleAssignmentsName": "[concat('rbac.aks.admin.', take(uniqueString(subscription().subscriptionId, resourceGroup().id), 5))]",
        "aksAdminManagedIdentityRoleAssignmentsId": "[resourceId('Microsoft.Resources/deployments', variables('aksAdminManagedIdentityRoleAssignmentsName'))]",
        "createLocalManagedIdentity": "[not(empty(parameters('aadPrincipalPassword')))]",
        "aadAdminGroupRegistrationLocalIdentityResourceId": "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('deployScriptIdentityName'))]",
        "aadAdminGroupRegistrationResourceName": "[concat('deploy.admingroup.', take(uniqueString(subscription().subscriptionId, resourceGroup().id), 5))]",
        "aadAdminGroupRegistrationResourceId": "[resourceId('Microsoft.Resources/deploymentScripts', variables('aadAdminGroupRegistrationResourceName'))]",
        "aadAdminGroupRegistrationRoleAssignmentsName": "[concat('rbac.admingroup.', take(uniqueString(subscription().subscriptionId, resourceGroup().id), 5))]",
        "aadAdminGroupRegistrationRoleAssignmentsId": "[resourceId('Microsoft.Resources/deployments', variables('aadAdminGroupRegistrationRoleAssignmentsName'))]",
        "logAnalyticsWorkspaceResourceId": "[resourceId('Microsoft.OperationalInsights/workspaces', parameters('logAnalyticsWorkspaceName'))]"
    },
    "resources": [
        {
            "comments": "Log Analytics instance for the cluster",
            "type": "Microsoft.OperationalInsights/workspaces",
            "name": "[parameters('logAnalyticsWorkspaceName')]",
            "apiVersion": "2015-11-01-preview",
            "location": "[resourceGroup().location]",
            "tags": "[parameters('tags')]",
            "properties": {
                "sku": {
                    "Name": "[parameters('logAnalyticsWorkspaceSku')]"
                },
                "features": {
                    "searchVersion": 1
                }
            }
        },
        {
            "comments": "Managed Kubernetes cluster Virtual Network Security Group.",
            "name": "[parameters('nsgName')]",
            "type": "Microsoft.Network/networkSecurityGroups",
            "apiVersion": "2018-08-01",
            "location": "[resourceGroup().location]",
            "tags": "[parameters('tags')]",
            "properties": {
                "securityRules": [
                    {
                        "name": "HTTPS",
                        "properties": {
                            "protocol": "TCP",
                            "sourcePortRange": "*",
                            "destinationPortRange": "443",
                            "sourceAddressPrefix": "*",
                            "destinationAddressPrefix": "*",
                            "access": "Allow",
                            "priority": 101,
                            "direction": "Inbound"
                        }
                    },
                    {
                        "name": "HTTP",
                        "properties": {
                            "protocol": "TCP",
                            "sourcePortRange": "*",
                            "destinationPortRange": "80",
                            "sourceAddressPrefix": "*",
                            "destinationAddressPrefix": "*",
                            "access": "Deny",
                            "priority": 102,
                            "direction": "Inbound"
                        }
                    },
                    {
                        "name": "SSH",
                        "properties": {
                            "protocol": "TCP",
                            "sourcePortRange": "*",
                            "destinationPortRange": "22",
                            "sourceAddressPrefix": "*",
                            "destinationAddressPrefix": "*",
                            "access": "Deny",
                            "priority": 110,
                            "direction": "Inbound"
                        }
                    }
                ]
            }
        },
        {
            "comments": "Managed Kubernetes cluster Vnet for Azure CNI.",
            "name": "[parameters('vnetName')]",
            "type": "Microsoft.Network/virtualNetworks",
            "apiVersion": "2018-08-01",
            "location": "[resourceGroup().location]",
            "tags": "[parameters('tags')]",
            "properties": {
                "addressSpace": {
                    "addressPrefixes": [
                        "10.0.0.0/8"
                    ]
                },
                "subnets": [
                    {
                        "name": "[variables('kubernetesSubnetName')]",
                        "properties": {
                            "addressPrefix": "10.240.0.0/16",
                            "networkSecurityGroup": {
                                "id": "[variables('nsgId')]"
                            }
                        }
                    }
                ]
            },
            "dependsOn": [
                "[variables('nsgId')]"
            ]
        },
        {
            "comments": "Managed identity of the cluster admin for automation.",
            "name": "[parameters('aksAdminManagedIdentityName')]",
            "type": "Microsoft.ManagedIdentity/userAssignedIdentities",
            "apiVersion": "2018-11-30",
            "location": "[resourceGroup().location]",
            "tags": "[parameters('tags')]"
        },
        {
            "comments": "Role assignments for cluster admin managed identity.",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2019-08-01",
            "name": "[variables('aksAdminManagedIdentityRoleAssignmentsName')]",
            "properties": {
                "mode": "Incremental",
                "parameters": {
                    "managedIdentityResourceId": {
                        "value": "[variables('aksAdminManagedIdentityResourceId')]"
                    },
                    "assignRoles": {
                         "value": ["AzureKubernetesServiceClusterAdmin", "DeploymentScript" ]
                    },
                    "tags": {
                        "value": "[parameters('tags')]"
                    }
                },
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[concat(parameters('templateUrl'), 'azuredeploy.rbac.json')]"
                }
            },
            "dependsOn": [
                "[variables('aksAdminManagedIdentityResourceId')]"
            ]
        },
        {
            "comments": "Managed identity to run scripts in the deployment.",
            "name": "[parameters('deployScriptIdentityName')]",
            "type": "Microsoft.ManagedIdentity/userAssignedIdentities",
            "condition": "[variables('createLocalManagedIdentity')]",
            "apiVersion": "2018-11-30",
            "location": "[resourceGroup().location]",
            "tags": "[parameters('tags')]"
        },
        {
            "comments": "Assign deployment script role to the managed identity to run admin group registration script.",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2019-08-01",
            "name": "[variables('aadAdminGroupRegistrationRoleAssignmentsName')]",
            "properties": {
                "mode": "Incremental",
                "parameters": {
                    "managedIdentityResourceId": {
                        "value": "[if(variables('createLocalManagedIdentity'), variables('aadAdminGroupRegistrationLocalIdentityResourceId'), parameters('aadPrincipalId'))]"
                    },
                    "assignRoles": {
                         "value": [ "DeploymentScript" ]
                    },
                    "tags": {
                        "value": "[parameters('tags')]"
                    }
                },
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[concat(parameters('templateUrl'), 'azuredeploy.rbac.json')]"
                }
            },
            "dependsOn": [
                "[variables('aadAdminGroupRegistrationLocalIdentityResourceId')]"
            ]
        },
        {
            "comments": "Register the admin group in AAD and add the managed service identity principal as member.",
            "type": "Microsoft.Resources/deploymentScripts",
            "apiVersion": "2020-10-01",
            "name": "[variables('aadAdminGroupRegistrationResourceName')]",
            "location": "[resourceGroup().location]",
            "tags": "[parameters('tags')]",
            "kind": "AzureCLI",
            "identity": {
                "type": "UserAssigned",
                "userAssignedIdentities": {
                    "[if(variables('createLocalManagedIdentity'), variables('aadAdminGroupRegistrationLocalIdentityResourceId'), parameters('aadPrincipalId'))]": {}
                }
            },
            "properties": {
                "forceUpdateTag": "[parameters('clusterName')]",
                "azCliVersion": "2.15.1",
                "primaryScriptURI": "[concat(parameters('templateUrl'), 'scripts/group-setup.sh')]",
                "arguments": "[concat(' --description \"Administrator group for ', parameters('clusterName'), ' in resource group ', resourceGroup().id, '\" --display \"', parameters('clusterName'), ' Administrators\" --member \"', reference(variables('aksAdminManagedIdentityRoleAssignmentsId')).outputs.principalId.value, '\" --name \"', parameters('clusterName'), '\" --sp \"', parameters('aadPrincipalId'), '\" --tenant \"', subscription().tenantId, '\"', if(not(empty(parameters('aadPrincipalPassword'))), '', ' --identity'))]",
                "timeout": "PT1H",
                "environmentVariables": [
                    {
                        "name": "principalPassword",
                        "secureValue": "[if(not(empty(parameters('aadPrincipalPassword'))), parameters('aadPrincipalPassword'), '')]"
                    }
                ],
                "cleanupPreference": "OnExpiration",
                "retentionInterval": "P1D"
            },
            "dependsOn": [
                "[variables('aadAdminGroupRegistrationRoleAssignmentsId')]",
                "[variables('aksAdminManagedIdentityRoleAssignmentsId')]"
            ]
        },
        {
            "comments": "Managed identity to run scripts in the deployment.",
            "name": "[parameters('aksClusterIdentityName')]",
            "type": "Microsoft.ManagedIdentity/userAssignedIdentities",
            "apiVersion": "2018-11-30",
            "location": "[resourceGroup().location]",
            "tags": "[parameters('tags')]"
        },
        {
            "comments": "Assign permissions to the managed identity of the cluster.",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2019-08-01",
            "name": "[variables('aksClusterIdentityRoleAssignmentsName')]",
            "properties": {
                "mode": "Incremental",
                "parameters": {
                    "managedIdentityResourceId": {
                        "value": "[variables('aksClusterIdentityResourceId')]"
                    },
                    "assignRoles": {
                         "value": [ "NetworkContributor", "ManagedIdentityOperator" ]
                    },
                    "tags": {
                        "value": "[parameters('tags')]"
                    }
                },
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[concat(parameters('templateUrl'), 'azuredeploy.msi.json')]"
                }
            },
            "dependsOn": [
                "[variables('aksClusterIdentityResourceId')]"
            ]
        },
        {
            "comments": "Create the Managed Kubernetes cluster instance",
            "type": "Microsoft.ContainerService/managedClusters",
            "name": "[parameters('clusterName')]",
            "apiVersion": "2020-09-01",
            "location": "[resourceGroup().location]",
            "tags": "[parameters('tags')]",
            "identity": {
                "type": "UserAssigned",
                "userAssignedIdentities": {
                    "[variables('aksClusterIdentityResourceId')]": {}
                }
            },
            "properties": {
                "enableRBAC": true,
                "dnsPrefix": "[parameters('aksDnsPrefix')]",
                "aadProfile": {
                    "managed": true,
                    "adminGroupObjectIDs": [
                        "[reference(variables('aadAdminGroupRegistrationResourceId')).outputs.groupId]"
                    ]
                },
                "agentPoolProfiles": [
                    {
                        "name": "agentpool",
                        "osDiskSizeGB": "[parameters('aksAgentOsDiskSizeGB')]",
                        "count": "[parameters('aksAgentCount')]",
                        "vmSize": "[parameters('aksAgentVMSize')]",
                        "osType": "Linux",
                        "storageProfile": "ManagedDisks",
                        "vnetSubnetID": "[variables('kubernetesSubnetId')]",
                        "type": "VirtualMachineScaleSets",
                        "mode": "System"
                    }
                ],
                "networkProfile": {
                    "networkPlugin": "azure",
                    "loadBalancerSku": "standard",
                    "serviceCidr": "[parameters('aksServiceCidr')]",
                    "dnsServiceIP": "[parameters('aksDnsServiceIP')]",
                    "dockerBridgeCidr": "[parameters('aksDockerBridgeCidr')]"
                },
                "addonProfiles": {
                    "omsagent": {
                        "enabled": true,
                        "config": {
                            "logAnalyticsWorkspaceResourceId": "[variables('logAnalyticsWorkspaceResourceId')]"
                        }
                    },
                    "httpApplicationRouting": {
                        "enabled": false
                    }
                }
            },
            "dependsOn": [
                "[variables('aksClusterIdentityRoleAssignmentsId')]",
                "[variables('aadAdminGroupRegistrationResourceId')]",
                "[variables('logAnalyticsWorkspaceResourceId')]"
            ]
        }
    ],
    "outputs": {
        "aksControlPlaneUrl": {
            "type": "string",
            "value": "[reference(variables('aksResourceId')).fqdn]"
        },
        "aksAdminGroupObjectId": {
            "type": "string",
            "value": "[reference(variables('aadAdminGroupRegistrationResourceId')).outputs.groupId]"
        },
        "aksAdminGroupName": {
            "type": "string",
            "value": "[reference(variables('aadAdminGroupRegistrationResourceId')).outputs.groupName]"
        },
        "aksResourceId": {
            "type": "string",
            "value": "[variables('aksResourceId')]"
        },
        "clusterName": {
            "type": "string",
            "value": "[parameters('clusterName')]"
        },
        "clusterNodeResourceGroup": {
            "type": "string",
            "value": "[reference(variables('aksResourceId')).nodeResourceGroup]"
        },
        "aksAdminIdentityResourceId": {
            "type": "string",
            "value": "[reference(variables('aksAdminManagedIdentityRoleAssignmentsId')).outputs.managedIdentityResourceId.value]"
        },
        "aksAdminIdentityPrincipalId": {
            "type": "string",
            "value": "[reference(variables('aksAdminManagedIdentityRoleAssignmentsId')).outputs.principalId.value]"
        },
        "aksAdminIdentityClientId": {
            "type": "string",
            "value": "[reference(variables('aksAdminManagedIdentityRoleAssignmentsId')).outputs.clientId.value]"
        },
        "logAnalyticsWorkspaceResourceId": {
            "type": "string",
            "value": "[variables('logAnalyticsWorkspaceResourceId')]"
        }
    }
}