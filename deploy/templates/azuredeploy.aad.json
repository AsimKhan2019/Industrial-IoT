{
    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "applicationName": {
            "type": "string",
            "defaultValue": "[concat('svc', take(uniqueString(subscription().subscriptionId, resourceGroup().id), 5))]",
            "metadata": {
                "description": "The name of the services endpoint. Leave empty for local development."
            }
        },
        "aadSetupScriptsUrl": {
            "type": "string",
            "defaultValue": "https://raw.githubusercontent.com/Azure/Industrial-IoT/master/deploy/scripts/",
            "metadata": {
                "description": "The helm setup scripts url.  Default is official repository."
            }
        },
        "tags": {
            "type": "object",
            "defaultValue": {},
            "metadata": {
                "description": "Tags for Azure resources."
            }
        }
    },
    "variables": {
        "aadAppRegistrationResourceName": "[concat('__aad', take(uniqueString(subscription().subscriptionId, resourceGroup().id), 5))]"
    },
    "resources": [
        {
            "comments": "Register the client and service applications in AAD.",
            "type": "Microsoft.Resources/deploymentScripts",
            "apiVersion": "2020-10-01",
            "name": "[variables('aadAppRegistrationResourceName')]",
            "location": "[resourceGroup().location]",            
            "tags": "[parameters('tags')]",
            "kind": "AzurePowerShell",
            "properties": {
                "forceUpdateTag": "[parameters('applicationName')]",
                "azPowerShellVersion": "3.0",
                "timeout": "PT1H",
                "scriptContent": "

        $tenant = Get-AzureADTenantDetail
        $defaultTenant = ($tenant.VerifiedDomains | Where-Object { $_._Default -eq $True })
        $tenantName = $defaultTenant.Name
        Write-Host 'Selected Tenant '$tenantName' as authority.'

        # Try to get current user
        try {
            try {
                $user = Get-AzureADUser -ObjectId $creds.Account.Id -ErrorAction Stop
            }
            catch {
                try {
                    $user = (Get-AzureADUser -SearchString $creds.Account.Id)[0]
                }
                catch {
                }
            }
        }
        catch {
            Write-Verbose 'Getting user principal for $($creds.Account.Id) failed.'
        }
                ",
                "arguments": "",
                "cleanupPreference": "OnSuccess",
                "retentionInterval": "P1D"
            },
            "dependsOn": [
            ]
        }
    ]
}