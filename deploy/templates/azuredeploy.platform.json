{
    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "platformManagedIdentityResourceId": {
            "type": "string",
            "metadata": {
                "description": "A user created managed identity for the platform instance to use to access azure services."
            }
        },
        "platformManagedIdentityName": {
            "type": "string",
            "metadata": {
                "description": "The name of the managed identity the platform instance uses to access azure services."
            }
        },
        "keyVaultName": {
            "type": "string",
            "metadata": {
                "description": "A user created keyvault containing service configuration."
            }
        },
        "keyVaultUri": {
            "type": "string",
            "metadata": {
                "description": "The Uri of the Azure Key Vault."
            }
        },
        "clusterName": {
            "type": "string",
            "metadata": {
                "description": "The name of the Azure Managed Kubernetes Cluster to deploy the platform bits to."
            }
        },
        "clusterAdminIdentityResourceId": {
            "type": "string",
            "metadata": {
                "description": "The admin managed identity resource to access the cluster."
            }
        },
        "serviceSiteName": {
            "type": "string",
            "defaultValue": "[concat('aip-', take(uniqueString(subscription().subscriptionId, resourceGroup().id), 5))]",
            "metadata": {
                "description": "The name of the services endpoint to register."
            }
        },
        "platformInstallScriptsUrl": {
            "type": "string",
            "defaultValue": "https://raw.githubusercontent.com/Azure/Industrial-IoT/master/deploy/scripts/",
            "metadata": {
                "description": "The helm setup scripts url.  Default is official repository."
            }
        },
        "helmRepoUrl": {
            "type": "string",
            "defaultValue": "https://microsoft.github.io/charts/repo",
            "metadata": {
                "description": "URL of the Helm repository containing azure-industrial-iot chart"
            }
        },
        "helmChartVersion": {
            "type": "string",
            "defaultValue": "0.3.1",
            "metadata": {
                "description": "Version of azure-industrial-iot Helm chart to use"
            }
        },
        "dockerServer": {
            "type": "string",
            "defaultValue": "mcr.microsoft.com",
            "metadata": {
                "description": "Specifies the endpoint of the Container Registry."
            }
        },
        "dockerUser": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "Specifies the user name to log into a private Container Registry."
            }
        },
        "dockerPassword": {
            "type": "secureString",
            "defaultValue": "",
            "metadata": {
                "description": "Specifies the password to use for a private Container Registry."
            }
        },
        "imagesNamespace": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "Specifies the namespace prefix for the images in the Container Registry."
            }
        },
        "imagesTag": {
            "type": "string",
            "defaultValue": "2.7.199",
            "metadata": {
                "description": "Specifies the image version tag to use for all images."
            }
        },
        "platformPublicIpName": {
            "type": "string",
            "defaultValue": "[concat(parameters('serviceSiteName'), '-ip')]",
            "metadata": {
                "description": "Public Ip resource name."
            }
        },
        "platformPublicIpSku": {
            "type": "string",
            "allowedValues": [
                "Basic",
                "Standard"
            ],
            "defaultValue": "Standard",
            "metadata": {
                "description": "Public IP Sku to use"
            }
        },
        "platformPublicIpAllocationMethod": {
            "type": "string",
            "allowedValues": [
                "Dynamic",
                "Static"
            ],
            "defaultValue": "Static",
            "metadata": {
                "description": "Allocation method for the public IP Address."
            }
        },
        "platformPublicIpDomainNameLabel": {
            "type": "string",
            "defaultValue": "[parameters('serviceSiteName')]",
            "metadata": {
                "description": "Public Ip domain label."
            }
        },
        "templateUrl": {
            "type": "string",
            "defaultValue": "[if(contains(deployment().properties, 'templateLink'), deployment().properties.templateLink.uri, 'https://raw.githubusercontent.com/Azure/Industrial-IoT/master/deploy/templates/')]",
            "metadata": {
                "description": "The artifacts url from which to pull all linked templates. Default is official repository."
            }
        },
        "tags": {
            "type": "object",
            "defaultValue": {},
            "metadata": {
                "description": "Tags for Azure resources."
            }
        }
    },
    "variables": {
        "roleAssignmentdeploymentScriptName": "[guid(subscription().subscriptionId, resourceGroup().id, parameters('serviceSiteName'), 'deploymentScriptRbacGuid')]",
        "roleAssignmentdeploymentScriptId":  "[resourceId('Microsoft.Authorization/roleAssignments', variables('roleAssignmentdeploymentScriptName'))]",
        "platformInstallResourceName": "[concat('__install', take(uniqueString(subscription().subscriptionId, resourceGroup().id), 5))]",
        "platformPublicIpResourceId": "[resourceId(resourceGroup().name, 'Microsoft.Network/publicIpAddresses', parameters('platformPublicIpName'))]",
        "configurationResourceName": "platform.configuration",
        "configurationResourceId": "[resourceId('Microsoft.Resources/deployments', variables('configurationResourceName'))]"
    },
    "resources": [
        {
            "comments": "Public IP address of the services endpoint.",
            "type": "Microsoft.Network/publicIpAddresses",
            "name": "[parameters('platformPublicIpName')]",
            "apiVersion": "2019-11-01",
            "location": "[resourceGroup().location]",
            "tags": "[parameters('tags')]",
            "sku": {
                "name": "[parameters('platformPublicIpSku')]"
            },
            "properties": {
                "publicIpAllocationMethod": "[parameters('platformPublicIpAllocationMethod')]",
                "dnsSettings": "[if(empty(parameters('platformPublicIpDomainNameLabel')), json('null'), json(concat('{\"domainNameLabel\": \"', parameters('platformPublicIpDomainNameLabel') ,'\"}')))]"
            },
            "dependsOn": [
            ]
        },
        {
            "comments": "Save platform configuration in keyVault.",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2019-08-01",
            "name": "[variables('configurationResourceName')]",
            "condition": "[not(empty(parameters('keyVaultName')))]",
            "properties": {
                "mode": "Incremental",
                "parameters": {
                    "keyVaultName": {
                        "value": "[parameters('keyVaultName')]"
                    },
                    "configuration": {
                        "value": [
                            {
                                "key": "PCS_SERVICE_NAME",
                                "value": "[concat('https://', reference(variables('platformPublicIpResourceId')).dnsSettings.fqdn)]"
                            }
                        ]
                    },
                    "tags": {
                        "value": "[parameters('tags')]"
                    }
                },
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[concat(parameters('templateUrl'), 'azuredeploy.configuration.json')]"
                }
            },
            "dependsOn": [
                "[variables('platformPublicIpResourceId')]"
            ]
        },
        {
            "comments": "Assign storage and container permissions to admin managed service identity at resource group scope.",
            "type": "Microsoft.Authorization/roleAssignments",
            "name": "[variables('roleAssignmentdeploymentScriptName')]",
            "apiVersion": "2020-04-01-preview",
            "location": "[resourceGroup().location]",
            "tags": "[parameters('tags')]",
            "properties": {
                "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                "principalId": "[reference(parameters('clusterAdminIdentityResourceId'), '2018-11-30').principalId]",
                "scope": "[resourceGroup().id]",
                "principalType": "ServicePrincipal"
            },
            "dependsOn": [
            ]
        },
        {
            "comments": "Install the platform into the cluster and set up monitoring and TLS termination under the admin identity.",
            "type": "Microsoft.Resources/deploymentScripts",
            "apiVersion": "2020-10-01",
            "name": "[variables('platformInstallResourceName')]",
            "condition": "[and(not(empty(parameters('clusterName'))), not(empty(parameters('platformInstallScriptsUrl'))), not(empty(parameters('helmChartVersion'))))]",
            "location": "[resourceGroup().location]",            
            "tags": "[parameters('tags')]",
            "kind": "AzureCLI",
            "identity": {
                "type": "UserAssigned",
                "userAssignedIdentities": {
                    "[parameters('clusterAdminIdentityResourceId')]": {}
                }
            },
            "properties": {
                "forceUpdateTag": "[parameters('helmChartVersion')]",
                "azCliVersion": "2.15.1",
                "primaryScriptURI": "[concat(parameters('platformInstallScriptsUrl'), 'helm-setup.sh')]",
                "arguments": "[concat(' --resource_group ', resourceGroup().name, ' --aks_cluster ', parameters('clusterName'), ' --load_balancer_ip ', reference(variables('platformPublicIpResourceId')).ipAddress, ' --public_ip_dns_label ', reference(variables('platformPublicIpResourceId')).dnsSettings.domainNameLabel, ' --helm_repo_url ', parameters('helmRepoUrl'), ' --helm_chart_version ', parameters('helmChartVersion'), ' --managed_identity_id ', parameters('platformManagedIdentityResourceId'), ' --managed_identity_name ', parameters('platformManagedIdentityName'), ' --managed_identity_client_id ', reference(parameters('platformManagedIdentityResourceId'), '2018-11-30').clientId, ' --tenant_id ', reference(parameters('platformManagedIdentityResourceId'), '2018-11-30').tenantId, ' --image_tag ', parameters('imagesTag'), ' --image_ns ', parameters('imagesNamespace'), ' --docker_server ', '\"', parameters('dockerServer'), '\"', ' --docker_user ', '\"', parameters('dockerUser'), '\"', ' --docker_password ', '\"', parameters('dockerPassword'), '\"', ' --key_vault_uri ', parameters('keyVaultUri'), ' --services_hostname ', reference(variables('platformPublicIpResourceId')).dnsSettings.fqdn)]",
                "supportingScriptUris": [
                    "[concat(parameters('platformInstallScriptsUrl'), 'omsagent.yaml')]",
                    "[concat(parameters('platformInstallScriptsUrl'), 'letsencrypt.yaml')]"
                ],
                "timeout": "PT1H",
                "cleanupPreference": "OnSuccess",
                "retentionInterval": "P1D"
            },
            "dependsOn": [
                "[variables('configurationResourceId')]",
                "[variables('platformPublicIpResourceId')]",
                "[variables('roleAssignmentdeploymentScriptId')]"
            ]
        }
    ],
    "outputs": {
        "serviceUrl": {
            "type": "string",
            "value": "[concat('https://', reference(variables('platformPublicIpResourceId')).dnsSettings.fqdn)]"
        }
    }
}