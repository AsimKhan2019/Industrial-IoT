{
    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "applicationName": {
            "type": "string",
            "metadata": {
                "description": "The name of the services endpoint to register."
            }
        },
        "keyVaultName": {
            "type": "string",
            "metadata": {
                "description": "A user created keyvault containing service configuration."
            }
        },
        "keyVaultUri": {
            "type": "string",
            "metadata": {
                "description": "The Uri of the Azure Key Vault."
            }
        },
        "aksClusterResourceId": {
            "type": "string",
            "metadata": {
                "description": "The resource id of the Azure Managed Kubernetes Cluster to deploy the platform bits to."
            }
        },
        "aksClusterAdminIdentityResourceId": {
            "type": "string",
            "metadata": {
                "description": "The admin managed identity resource to access the cluster."
            }
        },
        "helmRepoUrl": {
            "type": "string",
            "defaultValue": "https://microsoft.github.io/charts/repo",
            "metadata": {
                "description": "URL of the Helm repository containing azure-industrial-iot chart"
            }
        },
        "helmChartVersion": {
            "type": "string",
            "defaultValue": "0.3.1",
            "metadata": {
                "description": "Version of azure-industrial-iot Helm chart to use"
            }
        },
        "dockerServer": {
            "type": "string",
            "defaultValue": "mcr.microsoft.com",
            "metadata": {
                "description": "Specifies the endpoint of the Container Registry."
            }
        },
        "dockerUser": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "Specifies the user name to log into a private Container Registry."
            }
        },
        "dockerPassword": {
            "type": "secureString",
            "defaultValue": "",
            "metadata": {
                "description": "Specifies the password to use for a private Container Registry."
            }
        },
        "imagesNamespace": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "Specifies the namespace prefix for the images in the Container Registry."
            }
        },
        "imagesTag": {
            "type": "string",
            "defaultValue": "2.7.199",
            "metadata": {
                "description": "Specifies the image version tag to use for all images."
            }
        },
        "platformManagedIdentityName": {
            "type": "string",
            "defaultValue": "[concat('msi', take(uniqueString(subscription().subscriptionId, resourceGroup().id), 5))]",
            "metadata": {
                "description": "The name of the managed identity the platform instance uses to access azure services."
            }
        },
        "platformPublicIpName": {
            "type": "string",
            "defaultValue": "[concat('public-ip-', take(uniqueString(subscription().subscriptionId, resourceGroup().id), 5))]",
            "metadata": {
                "description": "Public Ip resource name."
            }
        },
        "platformPublicIpSku": {
            "type": "string",
            "allowedValues": [
                "Basic",
                "Standard"
            ],
            "defaultValue": "Standard",
            "metadata": {
                "description": "Public IP Sku to use"
            }
        },
        "platformPublicIpAllocationMethod": {
            "type": "string",
            "allowedValues": [
                "Dynamic",
                "Static"
            ],
            "defaultValue": "Static",
            "metadata": {
                "description": "Allocation method for the public IP Address."
            }
        },
        "platformPublicIpDomainNameLabel": {
            "type": "string",
            "defaultValue": "[parameters('applicationName')]",
            "metadata": {
                "description": "Public Ip domain label."
            }
        },
        "templateUrl": {
            "type": "string",
            "defaultValue": "[if(contains(deployment().properties, 'templateLink'), deployment().properties.templateLink.uri, 'https://raw.githubusercontent.com/Azure/Industrial-IoT/master/deploy/templates/')]",
            "metadata": {
                "description": "The artifacts url from which to pull all linked templates. Default is official repository."
            }
        },
        "tags": {
            "type": "object",
            "defaultValue": {},
            "metadata": {
                "description": "Tags for Azure resources."
            }
        }
    },
    "variables": {
        "platformManagedIdentityResourceId": "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('platformManagedIdentityName'))]",
        "platformManagedIdentityRoleAssignmentsName": "[concat('rbac.platform.', take(uniqueString(subscription().subscriptionId, resourceGroup().id), 5))]",
        "platformManagedIdentityRoleAssignmentsId": "[resourceId('Microsoft.Resources/deployments', variables('platformManagedIdentityRoleAssignmentsName'))]",
        "helmChartsInstallScriptResourceName": "[concat('deploy.helm', take(uniqueString(subscription().subscriptionId, resourceGroup().id), 5))]",
        "platformPublicIpRoleAssignmentsName": "[concat('public-ip-.', take(uniqueString(subscription().subscriptionId, resourceGroup().id), 5))]",
        "platformPublicIpRoleAssignmentsId": "[resourceId('Microsoft.Resources/deployments', variables('platformPublicIpRoleAssignmentsName'))]",
        "configurationResourceName": "config.platform",
        "configurationResourceId": "[resourceId('Microsoft.Resources/deployments', variables('configurationResourceName'))]"
    },
    "resources": [
        {
            "comments": "Create the managed identity for the platform.",
            "name": "[parameters('platformManagedIdentityName')]",
            "type": "Microsoft.ManagedIdentity/userAssignedIdentities",
            "apiVersion": "2018-11-30",
            "location": "[resourceGroup().location]",
            "tags": "[parameters('tags')]"
        },
        {
            "comments": "Assign rbac access permissions to the platform managed identity.",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2019-08-01",
            "name": "[variables('platformManagedIdentityRoleAssignmentsName')]",
            "properties": {
                "mode": "Incremental",
                "parameters": {
                    "managedIdentityResourceId": {
                        "value": "[variables('platformManagedIdentityResourceId')]"
                    },
                    "assignRoles": {
                        "value": [ "KeyVaultSecretOfficer", "StorageBlobDataContributor" ]
                    },
                    "tags": {
                        "value": "[parameters('tags')]"
                    }
                },
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[concat(parameters('templateUrl'), 'azuredeploy.rbac.json')]"
                }
            },
            "dependsOn": [
                "[variables('platformManagedIdentityResourceId')]"
            ]
        },
        {
            "comments": "Create a public IP address of the services endpoint in the node resource group.",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2019-08-01",
            "name": "[variables('platformPublicIpRoleAssignmentsName')]",
            "resourceGroup": "[reference(parameters('aksClusterResourceId'), '2020-09-01').nodeResourceGroup]",
            "properties": {
                "mode": "Incremental",
                "parameters": {
                    "platformPublicIpName": {
                        "value": "[parameters('platformPublicIpName')]"
                    },
                    "platformPublicIpSku": {
                        "value": "[parameters('platformPublicIpSku')]"
                    },
                    "platformPublicIpAllocationMethod": {
                        "value": "[parameters('platformPublicIpAllocationMethod')]"
                    },
                    "platformPublicIpDomainNameLabel": {
                        "value": "[parameters('platformPublicIpDomainNameLabel')]"
                    },
                    "tags": {
                        "value": "[parameters('tags')]"
                    }
                },
                "expressionEvaluationOptions": {
                    "scope": "inner"
                },
                "template": {
                    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                    "contentVersion": "1.0.0.0",
                    "parameters": {
                        "platformPublicIpName": {
                            "type": "string"
                        },
                        "platformPublicIpSku": {
                            "type": "string"
                        },
                        "platformPublicIpAllocationMethod": {
                            "type": "string"
                        },
                        "platformPublicIpDomainNameLabel": {
                            "type": "string"
                        },
                        "tags": {
                            "type": "object"
                        }
                    },
                    "variables": {
                        "platformPublicIpResourceId": "[resourceId('Microsoft.Network/publicIpAddresses', parameters('platformPublicIpName'))]"
                    },
                    "resources": [
                        {
                            "type": "Microsoft.Network/publicIpAddresses",
                            "name": "[parameters('platformPublicIpName')]",
                            "apiVersion": "2019-11-01",
                            "location": "[resourceGroup().location]",
                            "tags": "[parameters('tags')]",
                            "sku": {
                                "name": "[parameters('platformPublicIpSku')]"
                            },
                            "properties": {
                                "publicIpAllocationMethod": "[parameters('platformPublicIpAllocationMethod')]",
                                "dnsSettings": "[if(empty(parameters('platformPublicIpDomainNameLabel')), json('null'), json(concat('{\"domainNameLabel\": \"', parameters('platformPublicIpDomainNameLabel') ,'\"}')))]"
                            },
                            "dependsOn": [
                            ]
                        }
                    ],
                    "outputs": {
                        "fqdn": {
                            "type": "string",
                            "value": "[reference(variables('platformPublicIpResourceId')).dnsSettings.fqdn]"
                        },
                        "domainNameLabel": {
                            "type": "string",
                            "value": "[reference(variables('platformPublicIpResourceId')).dnsSettings.domainNameLabel]"
                        },
                        "ipAddress": {
                            "type": "string",
                            "value": "[reference(variables('platformPublicIpResourceId')).ipAddress]"
                        }
                    }
                }
            }
        },
        {
            "comments": "Install the platform into the AKS cluster and set up monitoring and TLS termination.",
            "type": "Microsoft.Resources/deploymentScripts",
            "apiVersion": "2020-10-01",
            "name": "[variables('helmChartsInstallScriptResourceName')]",
            "condition": "[and(not(empty(parameters('aksClusterResourceId'))), not(empty(parameters('helmChartVersion'))))]",
            "location": "[resourceGroup().location]",
            "tags": "[parameters('tags')]",
            "kind": "AzureCLI",
            "identity": {
                "type": "UserAssigned",
                "userAssignedIdentities": {
                    "[parameters('aksClusterAdminIdentityResourceId')]": {}
                }
            },
            "properties": {
                "forceUpdateTag": "[parameters('helmChartVersion')]",
                "azCliVersion": "2.15.1",
                "primaryScriptURI": "[concat(parameters('templateUrl'), 'scripts/helm-setup.sh')]",
                "arguments": "[concat(' --resource_group ', '\"', resourceGroup().name, '\"', ' --aks_cluster ', '\"', reference(parameters('aksClusterResourceId'), '2020-09-01', 'Full').name, '\"', ' --load_balancer_ip ', '\"', reference(variables('platformPublicIpRoleAssignmentsId')).outputs.ipAddress.value, '\"', ' --public_ip_dns_label ', '\"', reference(variables('platformPublicIpRoleAssignmentsId')).outputs.domainNameLabel.value, '\"', ' --helm_repo_url ', '\"', parameters('helmRepoUrl'), '\"', ' --helm_chart_version ', '\"', parameters('helmChartVersion'), '\"', ' --managed_identity_id ', '\"', variables('platformManagedIdentityResourceId'), '\"', ' --managed_identity_name ', '\"', parameters('platformManagedIdentityName'), '\"', ' --managed_identity_client_id ', '\"', reference(variables('platformManagedIdentityResourceId'), '2018-11-30').clientId, '\"', ' --tenant_id ', '\"', reference(variables('platformManagedIdentityResourceId'), '2018-11-30').tenantId, '\"', ' --image_tag ', '\"', parameters('imagesTag'), '\"', ' --image_ns ', '\"', parameters('imagesNamespace'), '\"', ' --docker_server ', '\"', parameters('dockerServer'), '\"', ' --docker_user ', '\"', parameters('dockerUser'), '\"', ' --docker_password ', '\"', parameters('dockerPassword'), '\"', ' --key_vault_uri ', '\"',  parameters('keyVaultUri'), '\"', ' --services_hostname ', '\"', reference(variables('platformPublicIpRoleAssignmentsId')).outputs.fqdn.value, '\"' )]",
                "supportingScriptUris": [
                    "[concat(parameters('templateUrl'), 'config/omsagent.yaml')]",
                    "[concat(parameters('templateUrl'), 'config/letsencrypt.yaml')]"
                ],
                "timeout": "PT1H",
                "cleanupPreference": "OnSuccess",
                "retentionInterval": "P1D"
            },
            "dependsOn": [
                "[variables('configurationResourceId')]",
                "[variables('platformPublicIpRoleAssignmentsId')]",
                "[variables('platformManagedIdentityRoleAssignmentsId')]"
            ]
        },
        {
            "comments": "Save platform configuration in keyVault.",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2019-08-01",
            "name": "[variables('configurationResourceName')]",
            "condition": "[not(empty(parameters('keyVaultName')))]",
            "properties": {
                "mode": "Incremental",
                "parameters": {
                    "keyVaultName": {
                        "value": "[parameters('keyVaultName')]"
                    },
                    "configuration": {
                        "value": [
                            {
                                "key": "PCS_SERVICE_NAME",
                                "value": "[concat('https://', reference(variables('platformPublicIpRoleAssignmentsId')).outputs.fqdn.value)]"
                            },
                            {
                                "key": "PCS_MSI_APPID",
                                "value": "[reference(variables('platformManagedIdentityResourceId'), '2018-11-30').clientId]"
                            },
                            {
                                "key": "PCS_MSI_TENANT",
                                "value": "[reference(variables('platformManagedIdentityResourceId'), '2018-11-30').tenantId]"
                            },
                            {
                                "key": "PCS_DOCKER_SERVER",
                                "value": "[parameters('dockerServer')]"
                            },
                            {
                                "key": "PCS_DOCKER_USER",
                                "value": "[parameters('dockerUser')]"
                            },
                            {
                                "key": "PCS_DOCKER_PASSWORD",
                                "value": "[parameters('dockerPassword')]"
                            },
                            {
                                "key": "PCS_IMAGES_NAMESPACE",
                                "value": "[parameters('imagesNamespace')]"
                            }
                        ]
                    },
                    "tags": {
                        "value": "[parameters('tags')]"
                    }
                },
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[concat(parameters('templateUrl'), 'azuredeploy.configuration.json')]"
                }
            },
            "dependsOn": [
                "[variables('platformManagedIdentityRoleAssignmentsId')]",
                "[variables('platformPublicIpRoleAssignmentsId')]"
            ]
        }
    ],
    "outputs": {
        "serviceUrl": {
            "type": "string",
            "value": "[concat('https://', reference(variables('platformPublicIpRoleAssignmentsId')).outputs.fqdn.value)]"
        },
        "managedIdentityResourceName": {
            "type": "string",
            "value": "[parameters('platformManagedIdentityName')]"
        },
        "managedIdentityResourceId": {
            "type": "string",
            "value": "[reference(variables('platformManagedIdentityRoleAssignmentsId')).outputs.managedIdentityResourceId.value]"
        },
        "managedIdentityClientId": {
            "type": "string",
            "value": "[reference(variables('platformManagedIdentityRoleAssignmentsId')).outputs.clientId.value]"
        },
        "managedIdentityPrincipalId": {
            "type": "string",
            "value": "[reference(variables('platformManagedIdentityRoleAssignmentsId')).outputs.principalId.value]"
        },
        "managedIdentityTenantId": {
            "type": "string",
            "value": "[reference(variables('platformManagedIdentityRoleAssignmentsId')).outputs.tenantId.value]"
        }
    }
}