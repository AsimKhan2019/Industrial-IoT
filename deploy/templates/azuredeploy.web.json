{
    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "siteName": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "The name of the application to create. Leave empty for local or services only development."
            }
        },
        "serviceSiteName": {
            "type": "string",
            "defaultValue": "[if(not(empty(parameters('siteName'))), concat('svc', take(uniqueString(subscription().subscriptionId, resourceGroup().id), 5)), '')]",
            "metadata": {
                "description": "The name of the services endpoint. Leave empty for local development."
            }
        },
        "branchName": {
            "type": "string",
            "defaultValue": "master",
            "metadata": {
                "description": "The branch from which to deploy deploy services and application.  Default to master."
            }
        },
        "repoUrl": {
            "type": "string",
            "defaultValue": "https://github.com/Azure/Industrial-IoT",
            "metadata": {
                "description": "The repository url from which to deploy services and application.  Default is official repository."
            }
        },
        "deployFromSource": {
            "type": "bool",
            "defaultValue": false,
            "metadata": {
                "description": "Whether to deploy app services from the repo source."
            }
        },
        "gitHubPat": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "Set to have github commits trigger continuous integration."
            }
        },
        "keyVaultName": {
            "type": "string",
            "metadata": {
                "description": "A user created keyvault containing service and client configuration."
            }
        },
        "keyVaultUri": {
            "type": "string",
            "metadata": {
                "description": "The endpoint of the keyvault."
            }
        },
        "managedIdentityResourceId": {
            "type": "string",
            "metadata": {
                "description": "A user created managed identity to use for service to service access."
            }
        },
        "managedIdentityClientId": {
            "type": "string",
            "metadata": {
                "description": "Specifies the registered managed identity client application id."
            }
        },
        "managedIdentityTenantId": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "The tenant the managed identity was registered in."
            }
        },
        "authTenantId": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "Specifies an Azure Active Directory tenant for authentication that is different from the one tied to the subscription."
            }
        },
        "dockerServer": {
            "type": "string",
            "defaultValue": "mcr.microsoft.com",
            "metadata": {
                "description": "Specifies the endpoint of the Container Registry."
            }
        },
        "dockerUser": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "Specifies the user name to log into a private Container Registry."
            }
        },
        "dockerPassword": {
            "type": "secureString",
            "defaultValue": "",
            "metadata": {
                "description": "Specifies the password to use for a private Container Registry."
            }
        },
        "imagesNamespace": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "Specifies the namespace prefix for the images in the Container Registry."
            }
        },
        "imagesTag": {
            "type": "string",
            "defaultValue": "latest",
            "metadata": {
                "description": "Specifies the image version tag to use for all images."
            }
        },
        "hostingPlanName": {
            "type": "string",
            "defaultValue": "[concat('appservices-', take(uniqueString(subscription().subscriptionId, resourceGroup().id), 6))]",
            "metadata": {
                "description": "Specifies the name of App Service Hosting Plan."
            }
        },
        "hostingPlanSku": {
            "type": "string",
            "defaultValue": "B1",
            "allowedValues": [
                "B1",
                "B2",
                "B3",
                "S1",
                "S2",
                "S3",
                "P1v2",
                "P2v2",
                "P3v2"
            ],
            "metadata": {
                "description": "The pricing sku for the hosting plan."
            }
        },
        "serviceBusEndpointSuffix": {
            "type": "string",
            "defaultValue": "servicebus.windows.net",
            "allowedValues": [
                "servicebus.windows.net",
                "servicebus.chinacloudapi.cn"
            ],
            "metadata": {
                "description": "Suffix added to Service Bus endpoint"
            }
        },
        "eventHubNamespaceName": {
            "type": "string",
            "defaultValue": "[concat('eventhubnamespace-', take(uniqueString(subscription().subscriptionId, resourceGroup().id), 6))]",
            "metadata": {
                "description": "The name of the Event Hub namespace created as part of the deployment."
            }
        },
        "eventHubName": {
            "type": "string",
            "defaultValue": "[concat('eventhub-', take(uniqueString(subscription().subscriptionId, resourceGroup().id), 6))]",
            "metadata": {
                "description": "The name of the Event Hub created as part of the deployment."
            }
        },
        "eventHubRetentionInDays": {
            "type": "int",
            "defaultValue": 2,
            "metadata": {
                "description": "The event hub message retention in days."
            }
        },
        "eventHubPartitionCount": {
            "type": "int",
            "defaultValue": 4,
            "metadata": {
                "description": "The event hub partition count."
            }
        },
        "eventHubSkuTier": {
            "type": "string",
            "defaultValue": "Standard",
            "allowedValues": [
                "Basic",
                "Standard"
            ],
            "metadata": {
                "description": "The Azure Event Hub SKU Tier."
            }
        },
        "eventHubSkuCapacity": {
            "type": "int",
            "defaultValue": 1,
            "metadata": {
                "description": "The Azure Event Hub SKU Capacity to use."
            }
        },
        "workspaceSku": {
            "type": "string",
            "allowedValues": [
                "Standalone",
                "PerNode",
                "PerGB2018"
            ],
            "defaultValue": "PerGB2018",
            "metadata": {
                "description": "Specifies the service tier of the Azure Log Analytics workspace."
            }
        },
        "workspaceName": {
            "type": "string",
            "defaultValue": "[concat('logs-', take(uniqueString(subscription().subscriptionId, resourceGroup().id), 10))]",
            "metadata": {
                "description": "Specifies the name of the Azure Log Analytics workspace created as part of this deployment."
            }
        },
        "appInsightsName": {
            "type": "string",
            "defaultValue": "[concat('appinsights-', take(uniqueString(subscription().subscriptionId, resourceGroup().id), 6))]",
            "metadata": {
                "description": "Specifies the name of Azure Application Insights instance created as part of this deployment."
            }
        },
        "workbookId": {
            "type": "string",
            "defaultValue": "[newGuid()]",
            "metadata": {
                "description": "The unique guid for this workbook instance"
            }
        },
        "templateUrl": {
            "type": "string",
            "defaultValue": "[if(contains(deployment().properties, 'templateLink'), deployment().properties.templateLink.uri, 'https://raw.githubusercontent.com/Azure/Industrial-IoT/master/deploy/templates')]",
            "metadata": {
                "description": "The artifacts url from which to pull all linked templates. Default is official repository."
            }
        },
        "tags": {
            "type": "object",
            "defaultValue": {},
            "metadata": {
                "description": "Tags for Azure resources."
            }
        }
    },
    "variables": {
        "serviceSiteResourceName": "[if(empty(parameters('serviceSiteName')), concat('svc', take(uniqueString(subscription().subscriptionId, resourceGroup().id), 5)), parameters('serviceSiteName'))]",
        "serviceSiteResourceId": "[resourceId('Microsoft.Web/sites', variables('serviceSiteResourceName'))]",
        "serviceContainerImageName": "[concat(if(empty(parameters('imagesNamespace')), '', concat(parameters('imagesNamespace'), '/')), 'iot/industrial-iot-services-all', ':', parameters('imagesTag'))]",
        "serviceConfigurationResourceName": "platform.service.configuration",
        "serviceConfigurationResourceId": "[resourceId('Microsoft.Resources/deployments', variables('serviceConfigurationResourceName'))]",
        "servicePublishingConfigResource": "[concat('Microsoft.Web/sites/', variables('serviceSiteResourceName'), '/config/publishingcredentials')]",
        "appSiteResourceName": "[if(empty(parameters('siteName')), concat('app', take(uniqueString(subscription().subscriptionId, resourceGroup().id), 5)), parameters('siteName'))]",
        "appSiteResourceId": "[resourceId('Microsoft.Web/sites', variables('appSiteResourceName'))]",
        "appContainerImageName": "[concat(if(empty(parameters('imagesNamespace')), '', concat(parameters('imagesNamespace'), '/')), 'iot/industrial-iot-frontend', ':', parameters('imagesTag'))]",
        "appConfigurationResourceName": "platform.app.configuration",
        "appPublishingConfigResource": "[concat('Microsoft.Web/sites/', variables('appSiteResourceName'), '/config/publishingcredentials')]",
        "workbookConfigurationResourceId": "[resourceId('Microsoft.Resources/deployments', variables('workbookConfigurationResourceName'))]",
        "eventHubKeyName": "RootManageSharedAccessKey",
        "eventHubKeyResourceId": "[resourceId('Microsoft.EventHub/namespaces/AuthorizationRules', parameters('eventHubNamespaceName'), variables('eventHubKeyName'))]",
        "eventHubNamespaceResourceId": "[resourceId('Microsoft.EventHub/namespaces', parameters('eventHubNamespaceName'))]",
        "eventHubResourceId": "[resourceId('Microsoft.EventHub/namespaces/eventhubs', parameters('eventHubNamespaceName'), parameters('eventHubName'))]",
        "eventHubUxConsumerGroup": "telemetryux",
        "appinsightsResourceId": "[resourceId('Microsoft.Insights/components', parameters('appInsightsName'))]",
        "omsResourceId": "[resourceId('Microsoft.OperationalInsights/workspaces', parameters('workspaceName'))]",
        "workbookConfigurationResourceName": "workbook.configuration",
        "configurationResourceName": "platform.configuration",
        "configurationResourceId": "[resourceId('Microsoft.Resources/deployments', variables('configurationResourceName'))]"
    },
    "resources": [
        {
            "comments": "Azure Event Hub Namespace for Device Telemetry events",
            "type": "Microsoft.EventHub/namespaces",
            "apiVersion": "2017-04-01",
            "name": "[parameters('eventHubNamespaceName')]",
            "location": "[resourceGroup().location]",
            "tags": "[parameters('tags')]",
            "sku": {
                "name": "[parameters('eventHubSkuTier')]",
                "tier": "[parameters('eventHubSkuTier')]",
                "capacity": "[parameters('eventHubSkuCapacity')]"
            },
            "properties": {
                "isAutoInflateEnabled": false,
                "maximumThroughputUnits": 0
            },
            "dependsOn": [
            ]
        },
        {
            "comments": "Azure Event Hub for processed Device Telemetry",
            "type": "Microsoft.EventHub/namespaces/eventhubs",
            "name": "[concat(parameters('eventHubNamespaceName'), '/', parameters('eventHubName'))]",
            "apiVersion": "2017-04-01",
            "location": "[resourceGroup().location]",
            "tags": "[parameters('tags')]",
            "properties": {
                "messageRetentionInDays": "[parameters('eventHubRetentionInDays')]",
                "partitionCount": "[parameters('eventHubPartitionCount')]",
                "status": "Active"
            },
            "dependsOn": [
                "[variables('eventHubNamespaceResourceId')]"
            ]
        },
        {
            "comments": "Consumer Group for UX and API telemetry consumers",
            "type": "Microsoft.EventHub/namespaces/eventhubs/consumergroups",
            "apiVersion": "2017-04-01",
            "name": "[concat(parameters('eventHubNamespaceName'), '/', parameters('eventHubName'), '/', variables('eventHubUxConsumerGroup'))]",
            "tags": "[parameters('tags')]",
            "properties": {
                "userMetadata": "UX Telemetry Consumer Group"
            },
            "dependsOn": [
                "[variables('eventHubResourceId')]"
            ]
        },
        {
            "comments": "Operations monitoring workspace instance",
            "type": "Microsoft.OperationalInsights/workspaces",
            "name": "[parameters('workspaceName')]",
            "apiVersion": "2015-11-01-preview",
            "location": "[resourceGroup().location]",
            "tags": "[parameters('tags')]",
            "properties": {
                "sku": {
                    "Name": "[parameters('workspaceSku')]"
                },
                "features": {
                    "searchVersion": 1
                }
            },
            "dependsOn": [
            ]
        },
        {
            "comments": "Applications monitoring instance",
            "type": "Microsoft.Insights/components",
            "name": "[parameters('appInsightsName')]",
            "apiVersion": "2015-05-01",
            "location": "[resourceGroup().location]",
            "tags": "[parameters('tags')]",
            "kind": "web",
            "properties": {
                "Application_Type": "web",
                "ApplicationId": "[parameters('appInsightsName')]"
            },
            "dependsOn": [
            ]
        },
        {
            "comments": "Create services metrics monitoring workbook",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2019-08-01",
            "name": "[variables('workbookConfigurationResourceName')]",
            "properties": {
                "mode": "Incremental",
                "parameters": {
                    "appInsightsId": {
                        "value": "[variables('appinsightsResourceId')]"
                    },
                    "workbookSourceId": {
                        "value": "[variables('omsResourceId')]"
                    },
                    "workbookId": {
                        "value": "[parameters('workbookId')]"
                    },
                    "tags": {
                        "value": "[parameters('tags')]"
                    }
                },
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[concat(parameters('templateUrl'), '/azuredeploy.workbook.json')]"
                }
            },
            "dependsOn": [
                "[variables('omsResourceId')]",
                "[variables('appInsightsResourceId')]"
            ]
        },
        {
            "comments": "Hosting plan to host platform services and application.",
            "type": "Microsoft.Web/serverfarms",
            "apiVersion": "2018-02-01",
            "kind": "[if(parameters('deployFromSource'), 'app', 'linux')]",
            "name": "[parameters('hostingPlanName')]",
            "location": "[resourceGroup().location]",
            "tags": "[parameters('tags')]",
            "sku": {
                "name": "[parameters('hostingPlanSku')]",
                "capacity": "[if(empty(parameters('siteName')), if(empty(parameters('serviceSiteName')), '0', '1'), '2')]"
            },
            "properties": {
                "name": "[parameters('hostingPlanName')]",
                "reserved": "[not(parameters('deployFromSource'))]"
            },
            "dependsOn": [
            ]
        },
        {
            "comments": "Save platform configuration in keyVault.",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2019-08-01",
            "name": "[variables('configurationResourceName')]",
            "properties": {
                "mode": "Incremental",
                "parameters": {
                    "keyVaultName": {
                        "value": "[parameters('keyVaultName')]"
                    },
                    "configuration": {
                        "value": [
                            {
                                "key": "PCS_EVENTHUB_CONNSTRING",
                                "value": "[concat('Endpoint=sb://', parameters('eventHubNamespaceName'), '.', parameters('serviceBusEndpointSuffix'), '/;SharedAccessKeyName=', variables('eventHubKeyName'), ';SharedAccessKey=', listkeys(variables('eventHubKeyResourceId'), '2017-04-01').primaryKey, ';')]"
                            },
                            {
                                "key": "PCS_EVENTHUB_NAME",
                                "value": "[parameters('eventHubName')]"
                            },
                            {
                                "key": "PCS_WORKSPACE_NAME",
                                "value": "[parameters('workspaceName')]"
                            },
                            {
                                "key": "PCS_WORKSPACE_ID",
                                "value": "[reference(resourceId('Microsoft.OperationalInsights/workspaces', parameters('workspaceName')), '2017-03-15-preview').customerId]"
                            },
                            {
                                "key": "PCS_WORKSPACE_KEY",
                                "value": "[listKeys(variables('omsResourceId'), '2015-11-01-preview').primarySharedKey]"
                            },
                            {
                                "key": "PCS_APPINSIGHTS_INSTRUMENTATIONKEY",
                                "value": "[reference(variables('appinsightsResourceId'), '2015-05-01').InstrumentationKey]"
                            },
                            {
                                "key": "PCS_SUBSCRIPTION_ID",
                                "value": "[subscription().subscriptionId]"
                            },
                            {
                                "key": "PCS_RESOURCE_GROUP",
                                "value": "[resourceGroup().name]"
                            }
                        ]
                    },
                    "tags": {
                        "value": "[parameters('tags')]"
                    }
                },
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[concat(parameters('templateUrl'), '/azuredeploy.configuration.json')]"
                }
            },
            "dependsOn": [
                "[variables('appinsightsResourceId')]",
                "[variables('eventHubResourceId')]",
                "[variables('omsResourceId')]"
            ]
        },
        {
            "comments": "Deploy all in one services.",
            "type": "Microsoft.Web/sites",
            "kind": "[if(parameters('deployFromSource'), 'app', 'app,linux,container')]",
            "name": "[variables('serviceSiteResourceName')]",
            "apiVersion": "2018-11-01",
            "location": "[resourceGroup().location]",
            "tags": "[parameters('tags')]",
            "identity": {
                "type": "UserAssigned",
                "userAssignedIdentities": {
                   "[parameters('managedIdentityResourceId')]": {}
                }
            },
            "condition": "[not(empty(parameters('serviceSiteName')))]",
            "properties": {
                "enabled": true,
                "clientAffinityEnabled": true,
                "serverFarmId": "[parameters('hostingPlanName')]",
                "httpsOnly": true,
                "siteConfig": {
                    "numberOfWorkers": 1,
                    "linuxFxVersion": "[if(not(parameters('deployFromSource')), concat('DOCKER|', parameters('dockerServer'), '/', variables('serviceContainerImageName')), '')]",
                    "managedPipelineMode": "Integrated",
                    "requestTracingEnabled": true,
                    "httpLoggingEnabled": true,
                    "detailedErrorLoggingEnabled": true,
                    "alwaysOn": true,
                    "minTlsVersion": "1.2",
                    "http20Enabled": true,
                    "xManagedServiceIdentityId": "[parameters('managedIdentityResourceId')]",
                    "webSocketsEnabled": true,
                    "appSettings": [
                        {
                            "name": "PROJECT",
                            "value": "[if(not(parameters('deployFromSource')), '', 'services/src/Microsoft.Azure.IIoT.Services.All/src/Microsoft.Azure.IIoT.Services.All.csproj')]"
                        },
                        {
                            "name": "DOCKER_REGISTRY_SERVER_URL",
                            "value": "[if(parameters('deployFromSource'), '', concat('https://', parameters('dockerServer')))]"
                        },
                        {
                            "name": "DOCKER_REGISTRY_SERVER_USERNAME",
                            "value": "[if(parameters('deployFromSource'), '', parameters('dockerUser'))]"
                        },
                        {
                            "name": "DOCKER_REGISTRY_SERVER_PASSWORD",
                            "value": "[if(parameters('deployFromSource'), '', parameters('dockerPassword'))]"
                        },
                        {
                            "name": "DOCKER_ENABLE_CI",
                            "value": "[if(parameters('deployFromSource'), '', 'false')]"
                        },
                        {
                            "name": "WEBSITES_PORT",
                            "value": "9080"
                        },
                        {
                            "name": "PCS_KEYVAULT_URL",
                            "value": "[parameters('keyVaultUri')]"
                        },
                        {
                            "name": "PCS_MSI_APPID",
                            "value": "[parameters('managedIdentityClientId')]"
                        },
                        {
                            "name": "PCS_MSI_TENANT",
                            "value": "[parameters('managedIdentityTenantId')]"
                        },
                        {
                            "name": "PCS_AUTH_TENANT",
                            "value": "[if(not(empty(parameters('authTenantId'))), parameters('authTenantId'), parameters('managedIdentityTenantId'))]"
                        },
                        {
                            "name": "PCS_SERVICE_URL",
                            "value": "[if(empty(parameters('serviceSiteName')), '', concat('https://', variables('serviceSiteResourceName'), '.azurewebsites.net'))]"
                        }
                    ]
                }
            },
            "resources": [
                {
                    "comments": "Configuration for all in one services application.",
                    "condition": "[not(empty(parameters('serviceSiteName')))]",
                    "type": "config",
                    "name": "appsettings",
                    "apiVersion": "2018-11-01",
                    "properties": {
                        "PROJECT": "[if(not(parameters('deployFromSource')), '', 'services/src/Microsoft.Azure.IIoT.Services.All/src/Microsoft.Azure.IIoT.Services.All.csproj')]",
                        "PCS_SERVICE_URL": "[if(empty(parameters('serviceSiteName')), '', concat('https://', reference(variables('serviceSiteResourceId'), '2018-11-01').hostNames[0]))]",
                        "PCS_KEYVAULT_URL": "[parameters('keyVaultUri')]",
                        "PCS_MSI_APPID": "[parameters('managedIdentityClientId')]",
                        "PCS_MSI_TENANT": "[parameters('managedIdentityTenantId')]",
                        "PCS_AUTH_TENANT": "[if(not(empty(parameters('authTenantId'))), parameters('authTenantId'), parameters('managedIdentityTenantId'))]",
                        "DOCKER_ENABLE_CI": "[if(parameters('deployFromSource'), '', 'false')]",
                        "DOCKER_REGISTRY_SERVER_URL": "[if(parameters('deployFromSource'), '', concat('https://', parameters('dockerServer')))]",
                        "DOCKER_REGISTRY_SERVER_USERNAME": "[if(parameters('deployFromSource'), '', parameters('dockerUser'))]",
                        "DOCKER_REGISTRY_SERVER_PASSWORD": "[if(parameters('deployFromSource'), '', parameters('dockerPassword'))]",
                        "WEBSITES_PORT": "9080"
                    },
                    "dependsOn": [
                        "[variables('serviceSiteResourceId')]"
                    ]
                },
                {
                    "comments": "CI source control configuration.",
                    "condition": "[and(not(empty(parameters('serviceSiteName'))), parameters('deployFromSource'))]",
                    "type": "sourcecontrols",
                    "name": "web",
                    "apiVersion": "2018-11-01",
                    "properties": {
                        "repoUrl": "[parameters('repoUrl')]",
                        "branch": "[parameters('branchName')]",
                        "deploymentRollbackEnabled": false,
                        "isManualIntegration": "[empty(parameters('gitHubPat'))]"
                    },
                    "dependsOn": [
                        "[variables('serviceSiteResourceId')]",
                        "appsettings"
                    ]
                }
            ],
            "dependsOn": [
                "[resourceId('Microsoft.Web/serverfarms', parameters('hostingPlanName'))]",
                "[variables('configurationResourceId')]"
            ]
        },
        {
            "comments": "Save service settings as configuration.",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2019-08-01",
            "name": "[variables('serviceConfigurationResourceName')]",
            "condition": "[and(not(empty(parameters('keyVaultName'))), not(empty(parameters('serviceSiteName'))))]",
            "properties": {
                "mode": "Incremental",
                "parameters": {
                    "keyVaultName": {
                        "value": "[parameters('keyVaultName')]"
                    },
                    "configuration": {
                        "value": [
                            {
                                "key": "PCS_SERVICE_NAME",
                                "value": "[concat('https://', reference(variables('serviceSiteResourceId'), '2018-11-01').hostNames[0])]"
                            },
                            {
                                "key": "PCS_SERVICE_HOOK",
                                "value": "[if(empty(parameters('serviceSiteName')), '', concat('https://$', list(variables('servicePublishingConfigResource'), '2016-08-01').properties.publishingUserName, ':', list(variables('servicePublishingConfigResource'), '2016-08-01').properties.publishingPassword, '@', replace(list(variables('servicePublishingConfigResource'), '2016-08-01').properties.scmUri, 'https://', ''), ''))]"
                            }
                        ]
                    },
                    "tags": {
                        "value": "[parameters('tags')]"
                    }
                },
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[concat(parameters('templateUrl'), '/azuredeploy.configuration.json')]"
                }
            },
            "dependsOn": [
                "[variables('workbookConfigurationResourceId')]",
                "[variables('serviceSiteResourceId')]"
            ]
        },
        {
            "comments": "Deploy application container.",
            "condition": "[not(empty(parameters('siteName')))]",
            "type": "Microsoft.Web/sites",
            "kind": "[if(parameters('deployFromSource'), 'app', 'app,linux,container')]",
            "name": "[variables('appSiteResourceName')]",
            "apiVersion": "2018-11-01",
            "location": "[resourceGroup().location]",
            "tags": "[parameters('tags')]",
            "identity": {
                "type": "UserAssigned",
                "userAssignedIdentities": {
                   "[parameters('managedIdentityResourceId')]": {}
                }
            },
            "properties": {
                "enabled": true,
                "clientAffinityEnabled": true,
                "serverFarmId": "[parameters('hostingPlanName')]",
                "httpsOnly": true,
                "siteConfig": {
                    "numberOfWorkers": 1,
                    "linuxFxVersion": "[if(not(parameters('deployFromSource')), concat('DOCKER|', parameters('dockerServer'), '/', variables('appContainerImageName')), '')]",
                    "managedPipelineMode": "Integrated",
                    "requestTracingEnabled": true,
                    "httpLoggingEnabled": true,
                    "detailedErrorLoggingEnabled": true,
                    "alwaysOn": true,
                    "minTlsVersion": "1.2",
                    "http20Enabled": true,
                    "xManagedServiceIdentityId": "[parameters('managedIdentityResourceId')]",
                    "webSocketsEnabled": true,
                    "appSettings": [
                        {
                            "name": "PROJECT",
                            "value": "[if(not(parameters('deployFromSource')), '', 'samples/src/Microsoft.Azure.IIoT.App/src/Microsoft.Azure.IIoT.App.csproj')]"
                        },
                        {
                            "name": "DOCKER_REGISTRY_SERVER_URL",
                            "value": "[if(parameters('deployFromSource'), '', concat('https://', parameters('dockerServer')))]"
                        },
                        {
                            "name": "DOCKER_REGISTRY_SERVER_USERNAME",
                            "value": "[if(parameters('deployFromSource'), '', parameters('dockerUser'))]"
                        },
                        {
                            "name": "DOCKER_REGISTRY_SERVER_PASSWORD",
                            "value": "[if(parameters('deployFromSource'), '', parameters('dockerPassword'))]"
                        },
                        {
                            "name": "DOCKER_ENABLE_CI",
                            "value": "[if(parameters('deployFromSource'), '', 'false')]"
                        },
                        {
                            "name": "PCS_KEYVAULT_URL",
                            "value": "[parameters('keyVaultUri')]"
                        },
                        {
                            "name": "PCS_MSI_APPID",
                            "value": "[parameters('managedIdentityClientId')]"
                        },
                        {
                            "name": "PCS_MSI_TENANT",
                            "value": "[parameters('managedIdentityTenantId')]"
                        },
                        {
                            "name": "PCS_AUTH_TENANT",
                            "value": "[if(not(empty(parameters('authTenantId'))), parameters('authTenantId'), parameters('managedIdentityTenantId'))]"
                        },
                        {
                            "name": "PCS_SERVICE_URL",
                            "value": "[if(empty(parameters('serviceSiteName')), '', concat('https://', reference(variables('serviceSiteResourceId'), '2018-11-01').hostNames[0]))]"
                        }
                    ]
                }
            },
            "resources": [
                {
                    "comments": "CI source control configuration.",
                    "condition": "[and(not(empty(parameters('siteName'))), parameters('deployFromSource'))]",
                    "type": "sourcecontrols",
                    "name": "web",
                    "apiVersion": "2018-11-01",
                    "properties": {
                        "repoUrl": "[parameters('repoUrl')]",
                        "branch": "[parameters('branchName')]",
                        "deploymentRollbackEnabled": false,
                        "isManualIntegration": "[empty(parameters('gitHubPat'))]"
                    },
                    "dependsOn": [
                        "[variables('appSiteResourceId')]"
                    ]
                }
            ],
            "dependsOn": [
                "[resourceId('Microsoft.Web/serverfarms', parameters('hostingPlanName'))]",
                "[variables('serviceConfigurationResourceId')]"
            ]
        },
        {
            "comments": "Save app hook as configuration.",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2019-08-01",
            "name": "[variables('appConfigurationResourceName')]",
            "condition": "[and(not(empty(parameters('keyVaultName'))), not(empty(parameters('siteName'))))]",
            "properties": {
                "mode": "Incremental",
                "parameters": {
                    "keyVaultName": {
                        "value": "[parameters('keyVaultName')]"
                    },
                    "configuration": {
                        "value": [
                            {
                                "key": "PCS_APP_HOOK",
                                "value": "[if(empty(parameters('siteName')), '', concat('https://$', list(variables('appPublishingConfigResource'), '2016-08-01').properties.publishingUserName, ':', list(variables('appPublishingConfigResource'), '2016-08-01').properties.publishingPassword, '@', replace(list(variables('appPublishingConfigResource'), '2016-08-01').properties.scmUri, 'https://', ''), ''))]"
                            }
                        ]
                    },
                    "tags": {
                        "value": "[parameters('tags')]"
                    }
                },
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[concat(parameters('templateUrl'), '/azuredeploy.configuration.json')]"
                }
            },
            "dependsOn": [
                "[variables('appSiteResourceId')]"
            ]
        }
    ],
    "outputs": {
        "appUrl": {
            "type": "string",
            "value": "[if(empty(parameters('siteName')), '', concat('https://', reference(variables('appSiteResourceId'), '2018-11-01').hostNames[0]))]"
        },
        "serviceUrl": {
            "type": "string",
            "value": "[if(empty(parameters('serviceSiteName')), '', concat('https://', reference(variables('serviceSiteResourceId'), '2018-11-01').hostNames[0]))]"
        }
    }
}